{"ast":null,"code":"var _jsxFileName = \"/Users/Maranatha/Desktop/PROJECT_REACTJS/CurrentChange/src/utils/ErrorBoundary.js\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Something went wrong.\");\n    }\n\n    return this.props.children;\n  }\n\n}\n\nexport default ErrorBoundary;","map":{"version":3,"sources":["/Users/Maranatha/Desktop/PROJECT_REACTJS/CurrentChange/src/utils/ErrorBoundary.js"],"names":["ErrorBoundary","React","Component","constructor","props","state","hasError","getDerivedStateFromError","error","componentDidCatch","info","console","log","render","children"],"mappings":";;AAGA,MAAMA,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAA4C;AAGxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AACH;;AAED,SAAOC,wBAAP,CAAgCC,KAAhC,EAAuC;AACnC;AACA,WAAO;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACH;;AAEDG,EAAAA,iBAAiB,CAACD,KAAD,EAAQE,IAAR,EAAc;AAC3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBE,IAAnB;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKR,KAAL,CAAWC,QAAf,EAAyB;AACrB;AACA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACH;;AAED,WAAO,KAAKF,KAAL,CAAWU,QAAlB;AACH;;AAzBuC;;AA6B5C,eAAed,aAAf","sourcesContent":["\n\n\nclass ErrorBoundary extends React.Component {\n\n    \n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, info) {\n        // You can also log the error to an error reporting service\n        console.log(error, info);\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return <h1>Something went wrong.</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n\n\nexport default ErrorBoundary"]},"metadata":{},"sourceType":"module"}